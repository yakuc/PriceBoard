/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SettingDialog.java
 *
 * Created on 2011/01/08, 0:00:05
 */
package com.yakuc.priceboard;

import com.yakuc.priceboard.driver.DriverSymbolInfo;
import com.yakuc.priceboard.driver.FXCMDriver;
import com.yakuc.priceboard.driver.GaitameDotComDriver;
import com.yakuc.priceboard.driver.IFxPriceDriver;
import java.io.IOException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import org.jdesktop.application.Action;

/**
 * 設定ダイアログ
 *
 * @author yakuc
 */
public class SettingDialog extends javax.swing.JDialog {

    /** Creates new form SettingDialog */
    public SettingDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        PriceBoardProperty prop = PriceBoardApp.getApplication().getPriceBoardProperty();
        this.driver = prop.getPriceDriverObj();
        symbolListSelectTM = new SymbolListSelectTableModel();
        symbolListSelectTM.setListData(this.driver.getAllSymbolList(), prop.getDisplaySymbols());
        initComponents();
        setInitData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        networkButtonGroup = new javax.swing.ButtonGroup();
        dataPanel = new javax.swing.JPanel();
        dataGetterLabel = new javax.swing.JLabel();
        dataDriverComboBox = new javax.swing.JComboBox();
        displayDataLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displaySymbolTable = new javax.swing.JTable();
        dataGetSecLabel = new javax.swing.JLabel();
        dataGetSecText = new javax.swing.JTextField();
        secLabel = new javax.swing.JLabel();
        autoDataUpdateCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        toolTipComboBox = new javax.swing.JComboBox();
        networkPanel = new javax.swing.JPanel();
        useProxyCombo = new javax.swing.JRadioButton();
        proxyAddressLabel = new javax.swing.JLabel();
        proxyAddressText = new javax.swing.JTextField();
        proxyPortLabel = new javax.swing.JLabel();
        proxyPortText = new javax.swing.JTextField();
        directConCombo = new javax.swing.JRadioButton();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        networkButtonGroup.add(useProxyCombo);
        networkButtonGroup.add(directConCombo);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.yakuc.priceboard.PriceBoardApp.class).getContext().getResourceMap(SettingDialog.class);
        setTitle(resourceMap.getString("SettingDialog.title")); // NOI18N
        setName("SettingDialog"); // NOI18N
        setResizable(false);

        dataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("dataPanel.border.title"))); // NOI18N
        dataPanel.setName("dataPanel"); // NOI18N

        dataGetterLabel.setText(resourceMap.getString("dataGetterLabel.text")); // NOI18N
        dataGetterLabel.setName("dataGetterLabel"); // NOI18N

        dataDriverComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FXCM", "外為どっとコム" }));
        dataDriverComboBox.setName("dataDriverComboBox"); // NOI18N
        dataDriverComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dataDriverComboBoxItemStateChanged(evt);
            }
        });

        displayDataLabel.setText(resourceMap.getString("displayDataLabel.text")); // NOI18N
        displayDataLabel.setName("displayDataLabel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        displaySymbolTable.setModel(symbolListSelectTM);
        displaySymbolTable.setName("displaySymbolTable"); // NOI18N
        TableColumn column;
        column = displaySymbolTable.getColumnModel().getColumn(0);
        column.setMaxWidth(40);		
        jScrollPane1.setViewportView(displaySymbolTable);

        dataGetSecLabel.setText(resourceMap.getString("dataGetSecLabel.text")); // NOI18N
        dataGetSecLabel.setToolTipText(resourceMap.getString("dataGetSecLabel.toolTipText")); // NOI18N
        dataGetSecLabel.setName("dataGetSecLabel"); // NOI18N

        dataGetSecText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        dataGetSecText.setText(resourceMap.getString("dataGetSecText.text")); // NOI18N
        dataGetSecText.setName("dataGetSecText"); // NOI18N

        secLabel.setText(resourceMap.getString("secLabel.text")); // NOI18N
        secLabel.setName("secLabel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.yakuc.priceboard.PriceBoardApp.class).getContext().getActionMap(SettingDialog.class, this);
        autoDataUpdateCheckBox.setAction(actionMap.get("autoGetDataCheckAction")); // NOI18N
        autoDataUpdateCheckBox.setText(resourceMap.getString("autoDataUpdateCheckBox.text")); // NOI18N
        autoDataUpdateCheckBox.setName("autoDataUpdateCheckBox"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        toolTipComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        toolTipComboBox.setName("toolTipComboBox"); // NOI18N

        javax.swing.GroupLayout dataPanelLayout = new javax.swing.GroupLayout(dataPanel);
        dataPanel.setLayout(dataPanelLayout);
        dataPanelLayout.setHorizontalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataPanelLayout.createSequentialGroup()
                        .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataGetterLabel)
                            .addComponent(displayDataLabel))
                        .addGap(24, 24, 24)
                        .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(dataDriverComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 254, Short.MAX_VALUE)))
                    .addGroup(dataPanelLayout.createSequentialGroup()
                        .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(autoDataUpdateCheckBox)
                            .addComponent(jLabel1))
                        .addGap(26, 26, 26)
                        .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(dataPanelLayout.createSequentialGroup()
                                .addComponent(dataGetSecLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dataGetSecText, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(secLabel))
                            .addComponent(toolTipComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)))
                .addContainerGap())
        );
        dataPanelLayout.setVerticalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataGetterLabel)
                    .addComponent(dataDriverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataPanelLayout.createSequentialGroup()
                        .addComponent(displayDataLabel)
                        .addGap(119, 119, 119))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoDataUpdateCheckBox)
                    .addComponent(dataGetSecLabel)
                    .addComponent(dataGetSecText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secLabel))
                .addGap(13, 13, 13)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(toolTipComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        networkPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("networkPanel.border.title"))); // NOI18N
        networkPanel.setName("networkPanel"); // NOI18N

        useProxyCombo.setAction(actionMap.get("proxySettingEnable")); // NOI18N
        useProxyCombo.setText(resourceMap.getString("useProxyCombo.text")); // NOI18N
        useProxyCombo.setName("useProxyCombo"); // NOI18N

        proxyAddressLabel.setText(resourceMap.getString("proxyAddressLabel.text")); // NOI18N
        proxyAddressLabel.setName("proxyAddressLabel"); // NOI18N

        proxyAddressText.setText(resourceMap.getString("proxyAddressText.text")); // NOI18N
        proxyAddressText.setName("proxyAddressText"); // NOI18N

        proxyPortLabel.setText(resourceMap.getString("proxyPortLabel.text")); // NOI18N
        proxyPortLabel.setName("proxyPortLabel"); // NOI18N

        proxyPortText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        proxyPortText.setText(resourceMap.getString("proxyPortText.text")); // NOI18N
        proxyPortText.setName("proxyPortText"); // NOI18N

        directConCombo.setAction(actionMap.get("proxySettingDisable")); // NOI18N
        directConCombo.setSelected(true);
        directConCombo.setText(resourceMap.getString("directConCombo.text")); // NOI18N
        directConCombo.setName("directConCombo"); // NOI18N

        javax.swing.GroupLayout networkPanelLayout = new javax.swing.GroupLayout(networkPanel);
        networkPanel.setLayout(networkPanelLayout);
        networkPanelLayout.setHorizontalGroup(
            networkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(networkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(networkPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(proxyAddressLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(proxyAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(proxyPortLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proxyPortText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(useProxyCombo)
                    .addComponent(directConCombo))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        networkPanelLayout.setVerticalGroup(
            networkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, networkPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(directConCombo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(useProxyCombo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(networkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proxyAddressLabel)
                    .addComponent(proxyAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(proxyPortLabel)
                    .addComponent(proxyPortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        okButton.setAction(actionMap.get("okAction")); // NOI18N
        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N

        cancelButton.setAction(actionMap.get("cancelAction")); // NOI18N
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(networkPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(networkPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataDriverComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dataDriverComboBoxItemStateChanged
        String driverName = this.driver.getName();
        String selectName =  (String) dataDriverComboBox.getSelectedItem();
        
        if (driverName.equalsIgnoreCase(selectName)) {
            return;
        }
        if (selectName.equals("FXCM")) {
            this.driver = new FXCMDriver();
        } else if (selectName.equals("外為どっとコム")) {
            this.driver = new GaitameDotComDriver();
        }

        PriceBoardProperty prop = PriceBoardApp.getApplication().getPriceBoardProperty();
        driver.init(prop.getNetworkConnectType(), prop.getProxyServer(), prop.getProxyPort());
        this.symbolListSelectTM.setListData(this.driver.getAllSymbolList(), null);
        this.symbolListSelectTM.fireTableDataChanged();

        // トレイアイコンメッセージシンボルのリスト作成
        Vector<String> allSymbolVec = new Vector<String>();
        for (DriverSymbolInfo info: this.driver.getAllSymbolList()) {
            allSymbolVec.add(info.getSymbolLabel());
        }
        toolTipComboBox.setModel(new DefaultComboBoxModel(allSymbolVec));
        toolTipComboBox.setSelectedIndex(0);

    }//GEN-LAST:event_dataDriverComboBoxItemStateChanged

    @Action
    public void cancelAction() {
        endStatus = 0;
        this.setVisible(false);
    }

    @Action
    public void proxySettingDisable() {
        proxyAddressLabel.setEnabled(false);
        proxyAddressText.setEnabled(false);
        proxyPortLabel.setEnabled(false);
        proxyPortText.setEnabled(false);
    }

    @Action
    public void proxySettingEnable() {
        proxyAddressLabel.setEnabled(true);
        proxyAddressText.setEnabled(true);
        proxyPortLabel.setEnabled(true);
        proxyPortText.setEnabled(true);
    }

    /**
     * 初期データの設定
     */
    public void setInitData() {
        PriceBoardProperty prop = PriceBoardApp.getApplication().getPriceBoardProperty();

        dataDriverComboBox.setSelectedItem(this.driver.getName());
        
        this.dataGetSecText.setText(Integer.toString(prop.getUpdateInterval()));
        if (prop.isAutoUpdate()) {
            autoDataUpdateCheckBox.setSelected(true);
            dataGetSecLabel.setEnabled(true);
            dataGetSecText.setEditable(true);
        } else {
            autoDataUpdateCheckBox.setSelected(false);
            dataGetSecLabel.setEnabled(false);
            dataGetSecText.setEditable(false);
        }
        if (prop.getNetworkConnectType() == PriceBoardProperty.NetworkConnectType.DIRECT) {
            directConCombo.setSelected(true);
            proxySettingDisable();
        } else if (prop.getNetworkConnectType() == PriceBoardProperty.NetworkConnectType.PROXY) {
            useProxyCombo.setSelected(true);
            proxySettingEnable();
        }
        proxyAddressText.setText(prop.getProxyServer());
        proxyPortText.setText(Integer.toString(prop.getProxyPort()));

        // トレイアイコンメッセージシンボルのリスト作成
        Vector<String> allSymbolVec = new Vector<String>();
        for (DriverSymbolInfo info: this.driver.getAllSymbolList()) {
            allSymbolVec.add(info.getSymbolLabel());
        }
        toolTipComboBox.setModel(new DefaultComboBoxModel(allSymbolVec));
        toolTipComboBox.setSelectedItem(prop.getIconDisplaySymbol());
    }

    @Action
    public void okAction() {
        if (!inputValueCheck()) {
            return;
        }
        PriceBoardProperty prop = PriceBoardApp.getApplication().getPriceBoardProperty();

        // 表示シンボル
        SymbolListSelectTableModel model = (SymbolListSelectTableModel) this.displaySymbolTable.getModel();
        prop.setDisplaySymbols(model.getDisplaySymbolArray());

        // 表示間隔
        if (autoDataUpdateCheckBox.isSelected()) {
            prop.setUpdateInterval(Integer.parseInt(this.dataGetSecText.getText()));
            prop.setIsAutoUpdate(true);
        } else {
            prop.setIsAutoUpdate(false);
        }

        // Proxy Server
        if (directConCombo.isSelected()) {
            prop.setNetworkConnectType(PriceBoardProperty.NetworkConnectType.DIRECT);
        } else if (useProxyCombo.isSelected()) {
            prop.setNetworkConnectType(PriceBoardProperty.NetworkConnectType.PROXY);
            prop.setProxyServer(proxyAddressText.getText());
            prop.setProxyPort(Integer.parseInt(proxyPortText.getText()));
        }
        // トレイアイコンメッセージシンボル
        prop.setIconDisplaySymbol((String) this.toolTipComboBox.getSelectedItem());

        // ドライバ名称
        String selectDriver = (String) dataDriverComboBox.getSelectedItem();
        if (selectDriver.equals("FXCM")) {
            prop.setPriceDriverName("com.yakuc.priceboard.driver.FXCMDriver");
        } else if (selectDriver.equals("外為どっとコム")) {
            prop.setPriceDriverName("com.yakuc.priceboard.driver.GaitameDotComDriver");
        }
        // ドライバの初期化
        this.driver.init(prop.getNetworkConnectType(), prop.getProxyServer(), prop.getProxyPort());
        prop.setPriceDriverObj(this.driver);
        
        try {
            // データの保存
            prop.savePropertyData(PriceBoardApp.getInstance());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                "データファイルの保存に失敗しました。\n" + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);

            Logger.getLogger(SettingDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        endStatus = 1;
        this.setVisible(false);
    }

    /**
     * 入力チェック
     * 
     * @return  true    OK
     *           false   NG
     */
    public boolean inputValueCheck() {
        // データ更新間隔のチェック
        if(autoDataUpdateCheckBox.isSelected() &&
                !validateRequired(this.dataGetSecText, "データ更新間隔")) {
            return false;
        }
        if(autoDataUpdateCheckBox.isSelected() &&
                !validateInt(this.dataGetSecText, "データ更新間隔")) {
            return false;
        }
        if (useProxyCombo.isSelected()) {
            if (!validateRequired(this.proxyAddressText, "プロキシサーバ")) {
                return false;
            }
            if (!validateRequired(this.proxyPortText, "プロキシサーバポート")) {
                return false;
            }
            if (!validateInt(this.proxyPortText, "プロキシサーバポート")) {
                return false;
            }
        }

        return true;
    }

    /**
     * 必須チェック
     *
     * @param textField
     * @param itemName
     * @return
    */
    public boolean validateRequired(javax.swing.JTextField textField, String itemName) {
        String val = textField.getText();

        if (val == null || val.equals("")) {
            JOptionPane.showMessageDialog(this,
                    itemName + "が入力されていません。",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    /**
     * 数値チェック
     * 
     * @param textField
     * @param itemName
     * @return
     */
    public boolean validateInt(javax.swing.JTextField textField, String itemName) {
        String val = textField.getText();
        try {
            Integer.parseInt(val);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this,
                    itemName + "が数値ではありません",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    @Action
    public void autoGetDataCheckAction() {
        if (autoDataUpdateCheckBox.isSelected()) {
            dataGetSecLabel.setEnabled(true);
            dataGetSecText.setEditable(true);
        } else {
            dataGetSecLabel.setEnabled(false);
            dataGetSecText.setEditable(false);
        }
    }

    public int getEndStatus() {
        return this.endStatus;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoDataUpdateCheckBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox dataDriverComboBox;
    private javax.swing.JLabel dataGetSecLabel;
    private javax.swing.JTextField dataGetSecText;
    private javax.swing.JLabel dataGetterLabel;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JRadioButton directConCombo;
    private javax.swing.JLabel displayDataLabel;
    private javax.swing.JTable displaySymbolTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup networkButtonGroup;
    private javax.swing.JPanel networkPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel proxyAddressLabel;
    private javax.swing.JTextField proxyAddressText;
    private javax.swing.JLabel proxyPortLabel;
    private javax.swing.JTextField proxyPortText;
    private javax.swing.JLabel secLabel;
    private javax.swing.JComboBox toolTipComboBox;
    private javax.swing.JRadioButton useProxyCombo;
    // End of variables declaration//GEN-END:variables

    /**
     * 終了状態
     */
    private int endStatus = 0;
    /**
     * データ取得ドライバ
     */
    private IFxPriceDriver driver;
    /**
     * シンボルリスト一覧のテーブルモデル
     */
    private SymbolListSelectTableModel symbolListSelectTM;
}
